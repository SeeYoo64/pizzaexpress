@page "/cart"
@using Web.Models
@using Web.Services
@inject CartService CartService
@inject NavigationManager NavigationManager

<h1>Your Cart</h1>

@if (cartItems == null || !cartItems.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <ul>
        @foreach (var item in cartItems)
        {
            <li>
                @item.Pizza.Name - $@(item.Pizza.Price * item.Quantity)
                <ul>
                    @foreach (var ingredient in item.Pizza.Description.Ingredients)
                    {
                        <li>@ingredient</li>
                    }
                </ul>
                <!-- Quantity controls -->
                <div class="quantity-controls">
                    <button @onclick="() => DecreaseQuantity(item.Pizza.Id)">-</button>
                    <span>@item.Quantity</span>
                    <button @onclick="() => IncreaseQuantity(item.Pizza.Id)">+</button>
                </div>

                <!-- Remove all button -->
                <button @onclick="() => RemoveAll(item.Pizza.Id)" class="remove-btn">
                    Remove
                </button>
            </li>
        }
    </ul>
    <h3>Total: $@TotalPrice</h3>
    <button @onclick="Checkout">Proceed to Checkout</button>
}

<a href="/menu">Back to Menu</a>

@code {
    private List<CartItem>? cartItems;

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItemsAsync();
        CartService.OnChange += StateHasChanged;
    }

    private async Task IncreaseQuantity(int pizzaId)
    {
        var pizza = cartItems.FirstOrDefault(i => i.Pizza.Id == pizzaId)?.Pizza;
        if (pizza != null)
        {
            await CartService.AddItemAsync(pizza);
            cartItems = await CartService.GetCartItemsAsync();
        }
    }

    private async Task DecreaseQuantity(int pizzaId)
    {
        await CartService.RemoveItemAsync(pizzaId); // Decreases by 1
        cartItems = await CartService.GetCartItemsAsync();
    }

    private async Task RemoveAll(int pizzaId)
    {
        await CartService.RemoveItemAsync(pizzaId, removeAll: true); // Removes all
        cartItems = await CartService.GetCartItemsAsync();
    }

    private decimal TotalPrice => cartItems?.Sum(i => i.Pizza.Price * i.Quantity) ?? 0;

    private void Checkout()
    {
        // Optionally send cart data to backend here
        CartService.ClearCartAsync();
        cartItems = new List<CartItem>();
        NavigationManager.NavigateTo("/confirmation");
    }
}