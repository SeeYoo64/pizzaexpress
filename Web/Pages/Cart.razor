@page "/cart"
@using Web.Models
@using Web.Services
@inject CartService CartService
@inject NavigationManager NavigationManager

<section class="menu-header">
    <h2>Your Cart</h2>
</section>
@if (cartItems == null || !cartItems.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <div class="cart-container">
        @foreach (var item in cartItems)
        {
            <div class="cart-item">
                <div class="item-details">
                    <h3>@item.Pizza.Name</h3>
                    <p>$@item.Pizza.Price each</p>
                </div>
                <div class="quantity-controls">
                    <button @onclick="() => DecreaseQuantity(item.Pizza.Id)">-</button>
                    <span>@item.Quantity</span>
                    <button @onclick="() => IncreaseQuantity(item.Pizza.Id)">+</button>
                </div>
                <button @onclick="() => RemoveAll(item.Pizza.Id)" class="remove-btn">🗑️</button>
            </div>
        }
    </div>

    <div class="cart-total">
        <p>Total: $@TotalPrice</p>
        <button class="checkout-btn" @onclick="Checkout">Proceed to Checkout</button>
    </div>
}

@code {
    private List<CartItem>? cartItems;

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItemsAsync();
        CartService.OnChange += StateHasChanged;
    }

    private async Task IncreaseQuantity(int pizzaId)
    {
        var pizza = cartItems.FirstOrDefault(i => i.Pizza.Id == pizzaId)?.Pizza;
        if (pizza != null)
        {
            await CartService.AddItemAsync(pizza);
            cartItems = await CartService.GetCartItemsAsync();
        }
    }

    private async Task DecreaseQuantity(int pizzaId)
    {
        await CartService.RemoveItemAsync(pizzaId); // Decreases by 1
        cartItems = await CartService.GetCartItemsAsync();
    }

    private async Task RemoveAll(int pizzaId)
    {
        await CartService.RemoveItemAsync(pizzaId, removeAll: true); // Removes all
        cartItems = await CartService.GetCartItemsAsync();
    }

    private decimal TotalPrice => cartItems?.Sum(i => i.Pizza.Price * i.Quantity) ?? 0;

    private void Checkout()
    {
        NavigationManager.NavigateTo("/cart/checkout");
    }

}