@page "/cart/checkout"
@using Web.Models
@using Web.Services
@inject CartService CartService
@inject HttpClient Http
@inject NavigationManager NavManager

<h2>Checkout</h2>

@if (cartItems == null || !cartItems.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <h4>Delivery Information</h4>
            <EditForm Model="@orderModel" OnValidSubmit="SubmitOrder">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label>Full Name</label>
                    <InputText @bind-Value="orderModel.CustomerName" class="form-control" />
                    <ValidationMessage For="@(() => orderModel.CustomerName)" />
                </div>

                <div class="form-group mb-3">
                    <label>Delivery Address</label>
                    <InputText @bind-Value="orderModel.Address" class="form-control" />
                    <ValidationMessage For="@(() => orderModel.Address)" />
                </div>

                <div class="form-group mb-3">
                    <label>Phone Number</label>
                    <InputText @bind-Value="orderModel.Phone" class="form-control" />
                    <ValidationMessage For="@(() => orderModel.Phone)" />
                </div>

                <button type="submit" class="btn btn-primary">Place Order</button>
            </EditForm>
        </div>

        <div class="col-md-6">
            <h4>Order Summary</h4>
            <div class="order-summary-card">
                <ul>
                    @foreach (var item in cartItems)
                    {
                        <li>
                            <span>@item.Quantity × @item.Pizza.Name</span>
                            <span class="float-end">$@(item.Pizza.Price * item.Quantity)</span>
                        </li>
                    }
                </ul>
                <hr />
                <div class="total-row">
                    <strong>Total:</strong>
                    <span class="float-end">$@TotalPrice</span>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<CartItem>? cartItems;
    private OrderModel orderModel = new();

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItemsAsync();
        if (cartItems == null || !cartItems.Any())
        {
            NavManager.NavigateTo("/cart");
        }
    }

    private decimal TotalPrice => cartItems?.Sum(i => i.Pizza.Price * i.Quantity) ?? 0;

    private async Task SubmitOrder()
    {
        var request = new PlaceOrderRequest
        {
            CustomerName = orderModel.CustomerName,
            Phone = orderModel.Phone,
            Address = orderModel.Address,
            Items = cartItems!.Select(i => new OrderItemDto
            {
                PizzaId = i.Pizza.Id,
                Quantity = i.Quantity
            }).ToList()
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/orders", request);
            if (response.IsSuccessStatusCode)
            {
                await CartService.ClearCartAsync();
                NavManager.NavigateTo("/order/confirmation");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error placing order: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during order submission: {ex.Message}");
        }
    }

    public class OrderModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Name is required")]
        public string CustomerName { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Phone is required")]
        public string Phone { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Address is required")]
        public string Address { get; set; } = string.Empty;
    }
}