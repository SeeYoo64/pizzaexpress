@page "/admin/pizzas/create"
@attribute [Authorize]
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Web.Models
@inject HttpClient Http
@inject NavigationManager NavManager
<h3>Create New Pizza</h3>

<EditForm Model="@formModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Name</label>
        <InputText @bind-Value="formModel.Name" class="form-control" />
        <ValidationMessage For="@(() => formModel.Name)" />
    </div>

    <div class="form-group">
        <label>Description Text</label>
        <InputText @bind-Value="formModel.DescriptionText" class="form-control" />
        <ValidationMessage For="@(() => formModel.DescriptionText)" />
    </div>

    <div class="form-group">
        <label>Weight</label>
        <InputText @bind-Value="formModel.Weight" class="form-control" />
    </div>

    <div class="form-group">
        <label>Ingredients</label> <br />
        @for (int i = 0; i < formModel.Ingredients.Count; i++)
        {
            int index = i;
            <div class="input-group mb-2">
                <InputText @bind-Value="formModel.Ingredients[index]" class="form-control" />
                <button class="btn btn-danger" @onclick="() => RemoveIngredient(index)">Remove</button>
            </div>
        }
        <button type="button" class="btn btn-secondary" @onclick="AddIngredient">Add Ingredient</button>
    </div>

    <div class="form-group">
        <label>Price</label>
        <InputNumber @bind-Value="formModel.Price" class="form-control" />
        <ValidationMessage For="@(() => formModel.Price)" />
    </div>

    <div class="form-check">
        <InputCheckbox @bind-Value="formModel.IsVegetarian" class="form-check-input" />
        <label class="form-check-label">Is Vegetarian</label>
    </div>


    <div class="form-group">
        <label>Image</label>
        <p class="text-muted">Загрузите фото пиццы (до 5 МБ, форматы: jpg, png)</p>
        <InputFile @bind-Value="formModel.Image" OnChange="OnImageSelected" class="form-control" />
    </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(imagePreviewUrl))
    {
        <div class="mt-3">
            <img src="@imagePreviewUrl" alt="Предпросмотр пиццы" style="max-width: 300px;" />
        </div>
    }

    <button type="submit" class="btn btn-primary mt-3">Save</button>
    <a href="/admin/pizzas" class="btn btn-secondary mt-3">Cancel</a>
</EditForm>

@code {
    private PizzaFormModel formModel = new();
    private string? imagePreviewUrl;
    private void AddIngredient()
    {
        formModel.Ingredients.Add(string.Empty);
    }

    private void RemoveIngredient(int index)
    {
        formModel.Ingredients.RemoveAt(index);
    }

    private async Task HandleSubmit()
    {
        // Удаляем пустые и null значения из ингредиентов
        var validIngredients = formModel.Ingredients
            .Where(i => !string.IsNullOrWhiteSpace(i))
            .ToList();

        if (validIngredients.Count == 0)
        {
            // Показываем ошибку пользователю
            ShowError("Пожалуйста, введите хотя бы один ингредиент.");
            return;
        }

        var request = new PizzaCreateRequest
            {
                PizzaDto = new PizzaDto
                {
                    Name = formModel.Name,
                    Description = new DescriptionDto
                    {
                        Text = formModel.DescriptionText,
                        Weight = formModel.Weight,
                        Ingredients = validIngredients
                    },
                    Price = formModel.Price,
                    IsVegetarian = formModel.IsVegetarian
                },
                Image = formModel.Image
            };

        var formData = new MultipartFormDataContent();

        var json = System.Text.Json.JsonSerializer.Serialize(request.PizzaDto);
        formData.Add(new StringContent(json), "PizzaDto");

        if (request.Image != null)
        {
            var fileContent = new StreamContent(request.Image.OpenReadStream());
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(request.Image.ContentType);
            formData.Add(fileContent, "Image", request.Image.Name);
        }

        try
        {
            var response = await Http.PostAsync("api/pizzas", formData);

            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/admin/pizzas");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error saving pizza: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during pizza creation: {ex.Message}");
        }
    }


    private string? errorMessage;

    private void ShowError(string message)
    {
        errorMessage = message;
        StateHasChanged();
    }

    
    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            // Ограничьте размер файла, если нужно
            const long maxFileSize = 5 * 1024 * 1024; // 5MB
            if (file.Size > maxFileSize)
            {
                ShowError("Файл слишком большой. Максимальный размер — 5 МБ.");
                return;
            }

            // Генерируем URL для предпросмотра
            var imageStream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var resizedImageStream = await ResizeImageAsync(imageStream, 300, 200); // Optional resize

            var url = await CreateImagePreviewUrl(resizedImageStream);
            imagePreviewUrl = url;
            formModel.Image = file;
            errorMessage = null;
        }
    }


    /// <summary>
    /// Converts a Stream into a base64-encoded image URL for preview.
    /// </summary>
    private async Task<string> CreateImagePreviewUrl(Stream imageStream)
    {
        using var memoryStream = new MemoryStream();
        await imageStream.CopyToAsync(memoryStream);
        byte[] imageBytes = memoryStream.ToArray();
        string base64String = Convert.ToBase64String(imageBytes);
        return $"data:image/png;base64,{base64String}";
    }

    /// <summary>
    /// Optional: Resizes the image before previewing (placeholder, can be extended).
    /// </summary>
    private async Task<Stream> ResizeImageAsync(Stream stream, int width, int height)
    {
        // For now, just return original stream. Later you can use ImageSharp or JS interop to resize.
        return new MemoryStream(await ReadAllBytesAsync(stream));
    }

    /// <summary>
    /// Helper to read all bytes from a stream.
    /// </summary>
    private async Task<byte[]> ReadAllBytesAsync(Stream stream)
    {
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        return memoryStream.ToArray();
    }



}