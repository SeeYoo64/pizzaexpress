@page "/admin/pizzas/edit/{Id:int}"
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms
@using Web.Models
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Edit Pizza</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (formModel == null)
{
    <p>Pizza not found.</p>
}
else
{
    <EditForm Model="@formModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Name</label>
            <InputText @bind-Value="formModel.Name" class="form-control" />
            <ValidationMessage For="@(() => formModel.Name)" />
        </div>

        <div class="form-group">
            <label>Description Text</label>
            <InputText @bind-Value="formModel.DescriptionText" class="form-control" />
            <ValidationMessage For="@(() => formModel.DescriptionText)" />
        </div>

        <div class="form-group">
            <label>Weight</label>
            <InputText @bind-Value="formModel.Weight" class="form-control" />
        </div>

        <div class="form-group">
            <label>Ingredients</label>
            @for (int i = 0; i < formModel.Ingredients.Count; i++)
            {
                int index = i;
                <div class="input-group mb-2">
                    <InputText @bind-Value="formModel.Ingredients[index]" class="form-control" />
                    <button class="btn btn-danger" @onclick="() => RemoveIngredient(index)">Remove</button>
                </div>
            }
            <button type="button" class="btn btn-secondary" @onclick="AddIngredient">Add Ingredient</button>
        </div>

        <div class="form-group">
            <label>Price</label>
            <InputNumber @bind-Value="formModel.Price" class="form-control" />
            <ValidationMessage For="@(() => formModel.Price)" />
        </div>

        <div class="form-check">
            <InputCheckbox @bind-Value="formModel.IsVegetarian" class="form-check-input" />
            <label class="form-check-label">Is Vegetarian</label>
        </div>

        <div class="form-group">
            <label>Photo</label>
            <InputFile OnChange="HandleImageUploadAsync" />

            <p class="text-muted">Leave empty to keep current image</p>
        </div>

        @if (!string.IsNullOrEmpty(imagePreviewUrl))
        {
            <div class="mt-3">
                <img src="@imagePreviewUrl" alt="Предпросмотр пиццы" style="max-width: 300px;" />
            </div>
        }

        <button type="submit" class="btn btn-primary mt-3">Save</button>
        <a href="/admin/pizzas" class="btn btn-secondary mt-3">Cancel</a>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }
    private PizzaFormModel? formModel;
    private bool isLoading = true;
    private string? imagePreviewUrl;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var pizza = await Http.GetFromJsonAsync<PizzaDto>($"api/pizzas/{Id}");

        if (pizza != null)
        {
            formModel = new PizzaFormModel
                {
                    Name = pizza.Name,
                    DescriptionText = pizza.Description.Text,
                    Weight = pizza.Description.Weight,
                    Ingredients = pizza.Description.Ingredients.ToList(),
                    Price = pizza.Price,
                    IsVegetarian = pizza.IsVegetarian
                };
        }

        isLoading = false;
    }

    private void AddIngredient()
    {
        formModel?.Ingredients.Add(string.Empty);
    }

    private void RemoveIngredient(int index)
    {
        if (formModel != null && index >= 0 && index < formModel.Ingredients.Count)
        {
            formModel.Ingredients.RemoveAt(index);
        }
    }

    private async Task HandleImageUploadAsync(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            const long maxFileSize = 5 * 1024 * 1024; // 5 MB
            if (file.Size > maxFileSize)
            {
                ShowError("Файл слишком большой. Максимальный размер — 5 МБ.");
                return;
            }

            var imageStream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var resizedImageStream = await ResizeImageAsync(imageStream, 300, 200);

            imagePreviewUrl = await CreateImagePreviewUrl(resizedImageStream);
            formModel!.Image = file;
            errorMessage = null;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        if (formModel == null) return;

        var validIngredients = formModel.Ingredients
            .Where(i => !string.IsNullOrWhiteSpace(i))
            .ToList();

        if (validIngredients.Count == 0)
        {
            ShowError("Пожалуйста, введите хотя бы один ингредиент.");
            return;
        }

        var request = new PizzaCreateRequest
            {
                PizzaDto = new PizzaDto
                {
                    Name = formModel.Name,
                    Description = new DescriptionDto
                    {
                        Text = formModel.DescriptionText,
                        Weight = formModel.Weight,
                        Ingredients = validIngredients
                    },
                    Price = formModel.Price,
                    IsVegetarian = formModel.IsVegetarian
                },
                Image = formModel.Image
            };

        var formData = new MultipartFormDataContent();

        var json = System.Text.Json.JsonSerializer.Serialize(request.PizzaDto);
        formData.Add(new StringContent(json), "PizzaDto");

        if (request.Image != null)
        {
            var fileContent = new StreamContent(request.Image.OpenReadStream());
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(request.Image.ContentType);
            formData.Add(fileContent, "Image", request.Image.Name);
        }

        try
        {
            var response = await Http.PutAsync($"api/pizzas/{Id}", formData);

            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/admin/pizzas");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error updating pizza: {error}");
                ShowError("Ошибка при обновлении данных.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during update: {ex.Message}");
            ShowError("Произошла ошибка при сохранении изменений.");
        }
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        StateHasChanged();
    }

    private async Task<Stream> ResizeImageAsync(Stream stream, int width, int height)
    {
        // Placeholder – just returns original for now
        return new MemoryStream(await ReadAllBytesAsync(stream));
    }

    private async Task<byte[]> ReadAllBytesAsync(Stream stream)
    {
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        return memoryStream.ToArray();
    }

    private async Task<string> CreateImagePreviewUrl(Stream imageStream)
    {
        using var memoryStream = new MemoryStream();
        await imageStream.CopyToAsync(memoryStream);
        byte[] imageBytes = memoryStream.ToArray();
        return $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
    }
}